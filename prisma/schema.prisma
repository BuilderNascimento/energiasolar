// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo para Leads
model Lead {
  id                String   @id @default(cuid())
  fullName          String
  email             String
  phone             String
  monthlyBill       String
  location          String
  installationType  String
  monthlyConsumption String?
  residents         String?
  roofArea          String?
  interest          String?
  message           String?
  status            LeadStatus @default(NEW)
  source            String   @default("website")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relacionamentos
  simulations       Simulation[]
  
  @@map("leads")
}

// Modelo para Simulações
model Simulation {
  id                String   @id @default(cuid())
  leadId            String?
  monthlyBill       Float
  location          String
  installationType  InstallationType
  monthlyConsumption Float?
  roofArea          Float?
  residents         Int?
  
  // Resultados da simulação
  panels            Int
  monthlyProduction Float
  monthlySavings    Float
  annualSavings     Float
  paybackPeriod     Float
  co2Reduction      Float
  savingsPercentage Float
  installationCost  Float
  systemPower       Float
  region            String
  locationFactor    Float
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relacionamentos
  lead              Lead?    @relation(fields: [leadId], references: [id])
  
  @@map("simulations")
}

// Modelo para Usuários Admin
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(VIEWER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLogin     DateTime?
  
  accounts Account[]
  sessions Session[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}
 
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Modelo para Produtos
model Product {
  id          String   @id @default(cuid())
  name        String   @unique
  type        ProductType
  price       Float
  image       String
  features    String   // JSON string com array de features
  description String?
  inStock     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("products")
}

// Modelo para Configurações do Sistema
model Setting {
  id    String @id @default(cuid())
  key   String @unique
  value String
  
  @@map("settings")
}

// Enums
enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  CONVERTED
  LOST
}

enum InstallationType {
  RESIDENCIAL
  COMERCIAL
  INDUSTRIAL
}

enum UserRole {
  ADMIN
  MANAGER
  VIEWER
}

enum ProductType {
  PATINETE
  BIKE
  SCOOTER
}
